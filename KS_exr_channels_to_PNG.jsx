/*
	Minnie (c) 2020

	Primary usage for this Photoshop script is when KeyShot fails to render video and the user did not opt to save the frames.
	This script creates the frames from the exr files generated by Keyshot.

	How to use:
	1) Locate the .exr files in temp folders
	2) Place this script on the same path as the folder of the exr files
	3) Create a new folder where the images will be saved
	4) Open Photoshop. File -> Scripts -> Browse

	NOTES
	1) This script should be in the same folder as the source and save folders
	2) This compiles the exr channel files (rendered from KeyShot) into a single png file for each frame
	3) This script opens the following files:
		<keyshotName>.<frameNumber>"_lighting.exr"
		<keyshotName>.<frameNumber>"_gi.exr"
		<keyshotName>.<frameNumber>"_caustics.exr"
		<keyshotName>.<frameNumber>"_reflection.exr"
		<keyshotName>.<frameNumber>"_refraction.exr"
*/

/*  USER VARIABLES: */
var keyshotName = "MyProject";
var sourceFolderName = "Raw";
var saveFolderName = "Export";
var startFrame = 1;
var endFrame = 1;
app.displayDialogs = DialogModes.NO; // disable popup dialogs
/*  END OF USER VARIABLES */

var parentPath = (new File($.fileName)).parent;
var sourcePath = parentPath+"/"+sourceFolderName;
var savePath = parentPath+"/"+saveFolderName;

for(var index=startFrame; index<=endFrame; index++) {
	/* file names of channels */
	var lightingFilePath = sourcePath+"/"+keyshotName+"."+index+"_lighting.exr";
	var giFilePath = sourcePath+"/"+keyshotName+"."+index+"_gi.exr";
	var causticsFilePath = sourcePath+"/"+keyshotName+"."+index+"_caustics.exr";
	var reflectionFilePath = sourcePath+"/"+keyshotName+"."+index+"_reflection.exr";
	var refractionFilePath = sourcePath+"/"+keyshotName+"."+index+"_refraction.exr";

	/* open lighting as base doc */
	app.open(File(lightingFilePath));  
	var baseDoc = app.activeDocument;

	/* add other channels */
	baseDoc = duplicate_blend_file_to_doc(giFilePath, baseDoc);
	baseDoc = duplicate_blend_file_to_doc(causticsFilePath, baseDoc);
	baseDoc = duplicate_blend_file_to_doc(reflectionFilePath, baseDoc);
	baseDoc = duplicate_blend_file_to_doc(refractionFilePath, baseDoc);

	/* save doc */
	var newFileName = savePath+"/"+index+".png";
	exportDocAsPng(app.activeDocument, newFileName);
	app.activeDocument.close(SaveOptions.DONOTSAVECHANGES);
}

function duplicate_blend_file_to_doc(path, doc) {

	/* Opens the file and duplicates layer to the base doc */

	app.open(File(path)); // file is now the active doc
	app.activeDocument.activeLayer.duplicate(doc, ElementPlacement.INSIDE);
	app.activeDocument.close(SaveOptions.DONOTSAVECHANGES)

	doc.activeLayer.blendMode = BlendMode.LINEARDODGE;

	return doc;
}

function exportDocAsPng(doc, fileName) {

	/* Exports the file with the following PNG settings */

	var opts = new ExportOptionsSaveForWeb();
	  if (doc.bitsPerChannel != BitsPerChannelType.EIGHT)
	    doc.bitsPerChannel = BitsPerChannelType.EIGHT;
	  opts.PNG8 = false;
	  opts.transparency = true;
	  opts.interlaced = false;
	  opts.quality = 100;
	  opts.includeProfile = false;
	  opts.format = SaveDocumentType.PNG;
	doc.exportDocument(new File(fileName), ExportType.SAVEFORWEB, opts);
}